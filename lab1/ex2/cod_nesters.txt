import heapq

class BinaryTreeNode:
    def __init__(self, data, car = None):
        self.data = data
        self.character = car
        self.leftChild = None
        self.rightChild = None
        
    def __lt__(self, otherNode):  # overloading operator <
        if(self.data < otherNode.data):
            return True
        return False


# pentru a retine numarul de aparitie a fiecarui caracter, construiect un vector de frecventa
# in care caracterul 'a' va fi pe pozitia 0 in vector, 'b' pe pozitia 1 etc. Avand in vedere ca
# presupunem ca sunt doar litere mici 'a' - 'z' vectorul va avea 27 spatii
def citire(fisier):
    f = open(fisier)
    cuv = f.read()
    frecv = [0 for i in range(26)]
    d = {}
    for lit in cuv:
        # frecv[ord(lit) - 97] += 1   # a are codul ascii 97
        d[lit] = d.get(lit, 0) + 1 
        
    # print("dictionar: ", d)
    # return frecv
    return cuv, d


# subpunctul 1)
# functia returneaza pentru fiecare caracter gasit numarul de aparitie a acestuia
def scriereFrecv():
    for i in range(len(frecv)):
        if frecv[i] != 0:
            print(f"{chr(i + 97)} - {frecv[i]}")
            

# subpunctul 2)

# fiecare litera va deveni un nod din arbore in care in variabila "data" retin numarul
# de aparitii si in "character" litera corespunzatoare. Avand in vedere ca literele vor 
# fi frunze, leftChild si rightChild nu vor pointa spre niciun alt nod. 

# am nevoie de un heap pentru ca algoritmul lui Huffman ia literele in ordine crescatoare
# a numarul lor de aparitii  => O(log n)

def creareHeap(frecv):
    h = []
    # for i in range(len(frecv)):
    #     if frecv[i] != 0:    
    #         node = BinaryTreeNode(frecv[i], chr(i + 97))
    #         heapq.heappush(h, node)
    for key in frecv.keys(): 
        node = BinaryTreeNode(frecv[key], key)
        heapq.heappush(h, node)
    return h  


# algoritmul lui algoritmul lui Huffman se opreste cand se ajunge la un arbore cu radacina
# la fiecare pas din primii 2 arbori cu cantitate minima se creeaza un singur arbore =>
# deci scoatem 2 noduri din heap si introducem unul.  => O(n logn)
def arboreHuffman(frecv):

    h = creareHeap(frecv)
    
    while len(h) != 1:
        
        x = heapq.heappop(h)
        y = heapq.heappop(h)
        # print(x.data, y.data)

        rad = BinaryTreeNode(x.data + y.data)
        rad.leftChild = x
        rad.rightChild = y
        # print(rad.leftChild, rad.rightChild)
        heapq.heappush(h, rad)
        # print(node3.character, node1.character, node2.character)
        # print(node3.data, node1.data, node2.data)
        # node3.leftChild = node1
        # node3.rightChild = node2
        # print(node3.leftChild, node3.rightChild)
        # print(node3.character, node1.character, node2.character)
        
        # rad = node3
        # heapq.heappush(h, (z, -1))
    
    
    # la final returnez radacina arborelui rezultat
    return rad

# subpunctul 2) afisarea arborelui
def parcurgere(rad):
    # print("Data00", rad.data, rad.character, rad.leftChild, rad.rightChild)
    if rad.leftChild != None:
        parcurgere(rad.leftChild)
        
    # print("Data11", rad.data)
    if rad.rightChild != None:
        parcurgere(rad.rightChild)  
    
    # print("Data", rad.data, rad.character)
    if rad.character != None:
        print(rad.character)
    # print(f"{chr(rad.character)} - {rad.data}")

# subpunctul 2) codificare
def codificareHuffman(rad, string, codHuffman):
    
    if rad.leftChild != None:
        string += '0'
        codificareHuffman(rad.leftChild, string, codHuffman)
        string = string[:len(string) - 1]
        
    if rad.rightChild != None:
        string += '1'
        codificareHuffman(rad.rightChild, string, codHuffman)  
        string = string[:len(string) - 1]
    
    if rad.character != None:
        # print(rad.character, string)
        codHuffman[rad.character] = string
        
    # print(codHuffman)

def encodedString(text, arb):
    
    g = open("write.txt", "w")
    for i in text:
        g.write(arb[i])
    # print()
    g.close()
    
    
def creareArbDinHuffman(huffman):
    rad = BinaryTreeNode(0)
    # print(huffman)
    for lit in huffman.keys():
        # print(lit)
        x = rad
        for cod in huffman[lit]:
            # print(cod, end='')
            if cod  == '0':
                if x.leftChild != None:
                    x = x.leftChild   
                   
                else:
                    y = BinaryTreeNode(0)
                    x.leftChild = y
                    x = y
                        
            if cod == '1': 
                if x.rightChild != None:
                    x = x.rightChild
                    
                else:
                    y = BinaryTreeNode(0)
                    x.rightChild = y
                    x = y
                    
        x.character = lit
        # print(" final",lit)
        
    return rad
            
def decoded(rad, text):      
    
    # print(text)
    # print(len(text))
    # if len(text) == 0:
    #     return
    ok = 0
    if len(text) == 0:
            ok = 2
            
    while ok == 0:
        
        nod = rad
          
        while ok == 0:
            
        # if nod.leftChild != None and nod.rightChild == None:
        #     print(nod.character)
        #     return
            if text[0] == '0':
                if nod.leftChild != None: 
                    nod = nod.leftChild
                    text = text[1:]
                    
                    if len(text) == 0:
                        ok = 2
                        print(nod.character, end='')
                    
                else:
                    ok = 1 # final de caracter
                    print(nod.character, end='')
                
            if ok == 0:
            
                if text[0] == '1':
                    if nod.rightChild != None:
                        nod = nod.rightChild
                        text = text[1:]
                        
                        if len(text) == 0:
                            ok = 2
                            print(nod.character, end='')
                        
                    else:
                        ok = 1 # final de caracter
                        print(nod.character, end='')
                    
            
        if ok == 1:
            # print("terminat litera")
            nod = rad
            ok = 0

        # ok = 0
    # if len(sir) == 0:     # daca nu exista sir de caractere, nu se va intampla nimic
    #         ok = 2
            
    # while ok == 0: 
        
    #     nod = rad  # incep de la radacina sa ma plimb in jos in arbore in functie de ordinea din sir
        
    #     while ok == 0:  # cat timp nu am ajuns la frunza sau nu s-a terminat sirul
           
    #         if sir[0] == '0':   # ma duc pe stanga
    #             if nod.leftChild != None: 
    #                 nod = nod.leftChild
    #                 sir = sir[1:]
                    
    #                 if len(sir) == 0:  # mereu verific daca am ajuns la final => daca nu fac asta, la urmatoarea bucla a whileului va face text[0] eroare
    #                     ok = 2
    #                     print(nod.character, end='')   # am ajuns la final, deci sigur sunt pe o frunza
                    
    #             else:
    #                 ok = 1  # urmatorul caracter din sir e 0 si nu am fiu stang inseamna ca sunt pe o frunza
    #                 print(nod.character, end='')
                
    #         if ok == 0:  
            
    #             if sir[0] == '1':
    #                 if nod.rightChild != None:
    #                     nod = nod.rightChild
    #                     sir = sir[1:]
                        
    #                     if len(sir) == 0:
    #                         ok = 2
    #                         print(nod.character, end='')
                        
    #                 else:
    #                     ok = 1 # final de caracter
    #                     print(nod.character, end='')
                    
            
    #     if ok == 1:
    #         # print("terminat litera")
    #         nod = rad
    #         ok = 0
        # else:
        #     print(nod.character)
        #     decoded(rad, rad, text)
    # else:
        
    # print(nod.character)
    # decoded(rad, rad, text[1:]) 
       
    # if text[0] == '0':
    #     if nod.leftChild != None: 
            
    #         decoded(rad, nod.leftChild, text[1:])
    #     # else:
    # # else:       

         
    # if text[0] == '1':
    #     if nod.rightChild != None:
    #         decoded(rad, nod.rightChild, text[1:])
    #     # else:
    #     #     print(nod.character)
    #     #     decoded(rad, rad, text)
    # # else:
        
    # print(nod.character)
    # decoded(rad, rad, text[1:])        
     

        
    

    
def decodedString(text, arb):
    
    rad = creareArbDinHuffman(arb)
    # codificareHuffman(rad, '')
    decoded(rad, text)

def compresie(fisier):
    
    codHuffman = {}
    text, frecv = citire(fisier)
    rad = arboreHuffman(frecv)
    codificareHuffman(rad, '', codHuffman)
    print(codHuffman)
    
    encodedString(text, codHuffman)
    
    
    
# 1   
text, frecv = citire("ex2.in")
print(frecv)
# scriereFrecv()

# 2
radacina = arboreHuffman(frecv)
# parcurgere(radacina)
print(f"Suma = {radacina.data}")
codHuffman = {}
codificareHuffman(radacina, '', codHuffman)
print(codHuffman)


# 3
# encodedString("Huffman coding is a data compression algorithm.", {'l': '00000', 'p': '00001', 't': '0001', 'h': '00100', 'e': '00101', 'g': '0011', 'a': '010', 'm': '0110', '.': '01110', 'r': '01111', ' ': '100', 'n': '1010', 's': '1011', 'c': '11000', 'f': '11001', 'i': '1101', 'o': '1110', 'd': '11110', 'u': '111110', 'H': '111111'})



# rad = creareArbDinHuffman({'l': '00000', 'p': '00001', 't': '0001', 'h': '00100', 'e': '00101', 'g': '0011', 'a': '010', 'm': '0110', '.': '01110', 'r': '01111', ' ': '100', 'n': '1010', 's': '1011', 'c': '11000', 'f': '11001', 'i': '1101', 'o': '1110', 'd': '11110', 'u': '111110', 'H': '111111'})
# codificareHuffman(rad, '')
# print(codHuffman)
# parcurgere(rad)

# 4
decodedString("11111111111011001110010110010101010011000111011110110110100011100110110111000101001111001000010101001100011100110000010111100101101110111101111010101000100000000111110011111101000100100011001110", {'l': '00000', 'p': '00001', 't': '0001', 'h': '00100', 'e': '00101', 'g': '0011', 'a': '010', 'm': '0110', '.': '01110', 'r': '01111', ' ': '100', 'n': '1010', 's': '1011', 'c': '11000', 'f': '11001', 'i': '1101', 'o': '1110', 'd': '11110', 'u': '111110', 'H': '111111'})
# decodedString("11111111111011001110010110010101010011000111011110110110100011100110110111000101001111001000010101001100011100110000010111100101101110111101111010101000100000000111110011111101000100100011001110", {'a': '0', 'b': '10', 'c' : '110', 'd': '111'})

compresie("ex25.in")

    

